import { defineConfig } from 'vite';
import { preloadChunks } from './package.json';
import fs from 'fs';
import path from 'path';

export default defineConfig({
  root: 'src',
  build: {
    outDir: '../dist',
    emptyOutDir: true,
  },
  appType: 'mpa',
  server: {
    allowedHosts: true,
  },
  plugins: [
    {
      name: 'get-chunks-and-code',
      apply: 'build',
      async buildStart() {
        const infrastructureChunksDir = '../../infrastructure/minio/chunks';
        const infrastructureCodeDir = '../../infrastructure/minio/code';
        const chunksDir = './src/public/chunks';
        const codeDir = './src/public/code';

        const coordsRe = /^(-?\d+)_(-?\d+)\.json$/;
        const codeRe = /^(-?\d+)_(-?\d+)\.js$/;

        // Remove old chunk files
        for (const file of fs.readdirSync(chunksDir)) {
          if (coordsRe.test(file)) {
            fs.unlinkSync(path.join(chunksDir, file));
          }
        }

        // Remove old code files
        for (const file of fs.readdirSync(codeDir)) {
          if (codeRe.test(file)) {
            fs.unlinkSync(path.join(codeDir, file));
          }
        }

        // copy chunks from infrastructure to publicDir
        for (const file of fs.readdirSync(infrastructureChunksDir)) {
          if (coordsRe.test(file)) {
            fs.copyFileSync(
              path.join(infrastructureChunksDir, file),
              path.join(chunksDir, file),
            );
          }
        }

        for (const file of fs.readdirSync(infrastructureCodeDir)) {
          if (codeRe.test(file)) {
            fs.copyFileSync(
              path.join(infrastructureCodeDir, file),
              path.join(codeDir, file),
            );
          }
        }
      },
    },
    {
      name: 'generate-known-chunks',
      buildStart() {
        const chunksDir = './src/public/chunks';
        const outFile = './src/app/knownChunks.ts';
        const chunkRe = /^(-?\d+)_(-?\d+)\.json$/;
        const coords = [];
        for (const file of fs.readdirSync(chunksDir)) {
          const match = file.match(chunkRe);
          if (match) {
            coords.push([parseInt(match[1], 10), parseInt(match[2], 10)]);
          }
        }
        const content = `// Auto-generated by vite plugin\nimport { TupleSet } from './structures/tuppleSet';\n// prettier-ignore\nexport default new TupleSet(${JSON.stringify(coords)}) as TupleSet;\n`;
        fs.writeFileSync(outFile, content);
      },
    },
    {
      name: 'inject-preload-chunks',
      enforce: 'post',
      async transform(code, id) {
        if (!id.endsWith('/app.ts')) return;

        if (!preloadChunks || !preloadChunks.length) return;

        const chunkCalls = preloadChunks
          .map((coords) => {
            const chunkPath = `./src/public/chunks/${coords[0]}_${coords[1]}.json`;
            const blocks = JSON.parse(fs.readFileSync(chunkPath, 'utf-8'));
            return `this.metaManager.loadChunkData([${coords.join(',')}], ${JSON.stringify(blocks, null, 2)});`;
          })
          .filter(Boolean)
          .join('\n');

        return code.replace(`"__PRELOAD_CHUNKS__";`, chunkCalls);
      },
    },
    {
      name: 'watch-blocks',
      apply: 'serve',
      handleHotUpdate({ file, server }) {
        if (file.startsWith(server.config.root + '/public')) {
          server.restart();
        }
      },
    },
  ],
});
